<?xml version="1.0"?>
<tool id="edu.tamu.cpt2.gff3.gff3_validator" name="Validate GFF3" version="1.0">
  <description>Validates that a GFF3 file is structured correctly, and details any sections which are not.</description>
  <macros>
    <import>macros.xml</import>
    <import>cpt-macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="aggressive"><![CDATA[
python $__tool_directory__/gff3_validator.py
"$gff3In"
--out_errorlog "$Errorlog"
$filterGFF.autofix
#if (str($removeAnnote.removeBool) == '--removeAnnote'):
--removeAnnote "$removeAnnote.annoteList"
#end if
#if (str($filterGFF.autofix) == '--autoFix' or str($removeAnnote.removeBool) == '--removeAnnote'):
>> gffOut
#end if
]]></command>
  <inputs>
    <param label="GFF3" name="gff3In" type="data" format="gff3"/>
    <conditional name="filterGFF">
      <param label="Automatically fix genbank-incompatible qualifiers" name="autofix" type="boolean" truevalue="--autoFix" falsevalue="" checked="false"/>
      <when value=""/>
    </conditional>
    <conditional name="removeAnnote">
      <param label="Remove metadata/ annotation features" name="removeBool" type="boolean" truevalue="--removeAnnote" falsevalue="" checked="false"/>
      <when value="--removeAnnote">
        <param name="annoteList" type="text" value="remark contig" label="Metadata features to remove (space seperated list)" />
      </when>
    </conditional>
  </inputs>
  <outputs>
        <data name="Errorlog" format="txt" label="Errorlog"/>
        <data format="gff3" name="gffOut" label="GFF with fixed qualifiers">
              <filter>filterGFF['autofix'] or removeAnnote['removeBool']</filter>
        </data>
  </outputs>
  <help><![CDATA[
**What it does**

Reads through the GFF3 file in search of errors that may make results inaccurate or nonsensical. Outputs an error log as a .txt file listing the sort of error found, the type and ID of the feature which caused it, and any other relevant information such as location, and finally ends with the number of errors and warnings found. 

Will log an error on: 
  Incorrect number of features- If an mRNA has more than two exons, an error will be raised with the mRNA feature's ID and its total number of exons. The same will occur if a gene has more than one mRNA feature. This function can be expanded to other feature types with set maximums.
  Incorrect start/end boundary: If an object has nonsensical location data, an error is raised. The criteria for this is detailed in a later section.
  Excessive overlap: If a feature overlaps another feature by too much, an error is raised with the ID's and locations of both. The current overlap allowances are 10 bases if one of the features is a tRNA object, and 60 bases if both are genes.
  Incorrect parenting: If exons or CDS subfeatures are parented directly to the gene rather than the gene's mRNA feature, an error is raised with the IDs of the gene and subfeatures.

Additionally, the program will raise a warning if:
  No subfeatures: If a gene has no mRNA object, or an mRNA object has no exons or CDS features, a warning with the empty object's ID is raised.
  Unencoded character in qualifiers: The " character is used by Genbank to mark its own qualifier fields, so any unescaped " in a qualifier will break the GFF to Genbank conversion. To escape the " character, it must be followed by another " immediately after. The autofix option will automatically apply this fix.
  Duplicated features- A gene has the same type, start, and end base as another feature in the GFF3 file. Will output the types, IDs, and locations of both features. 

**Boundary Start/End Rules**

All features must fall within the location start/end of their parent object.
mRNA features must have the same location data as their parent gene object.
Exons must have the same start and/or end as their parent mRNA. If there are two, one must have the same start as the mRNA, the other must have the same end, and they may not overlap.
At least one CDS feature must have either the same start or end as the mRNA parent.

**Additional Notes on Duplicate Entry Error**

If you are having trouble solving a duplicated feature error, read this. GFF3 requires all features to have a unique ID. If the parser detects that two entries have the same ID, it automatically gives the second one a temporary random ID, which is what's being output to the errorlog. If you are getting a duplicate entry error, but cannot find one of the error IDs in your GFF3 file, it most likely means there are two of the other ID in your file (ie, in addition to having the same type and location, the feature also has the same ID). This will most likely have been caused by someone copy/pasting sections of the GFF3 by hand and accidentally creating duplicates, and can be resolved by deleting the second entry.
   
      ]]></help>
  <citations>
                        <citation type="bibtex">
			@unpublished{galaxyTools,
				author = {A. Criscione},
				title = {CPT Galaxy Tools},
				year = {2019-2020},
				note = {https://github.com/tamu-cpt/galaxy-tools/}
			}
			</citation>
		</citations>
</tool>
