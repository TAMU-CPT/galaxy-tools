<?xml version="1.0"?>
<tool id="edu.tamu.cpt.fasta.regex" name="FASTA Regex Search" version="1.0">
	<description>Filter sequences based on regular expressions</description>
	<macros>
		<import>macros.xml</import>
		<import>cpt-macros.xml</import>
	</macros>
	<expand macro="requirements">
            <requirement type="package" version="2019.06.08">regex</requirement>
        <expand/>
	<command detect_errors="aggressive"><![CDATA[
$__tool_directory__/fasta_regex_search.py
@SEQUENCE@
"$regex"
"$stats"
> $default]]></command>
	<inputs>
		<expand macro="input/fasta" />
		<param area="false" label="Regular Expression" name="regex" type="text">
			<sanitizer invalid_char="">
				<valid>
					<add value="[" />
					<add value="]" />
					<add value="{" />
					<add value="}" />
					<add value="$" />
				</valid>
			</sanitizer>
		</param>
	</inputs>
	<outputs>
		<data format="fasta" name="default" label="$regex in $sequence.name"/>
		<data format="tabular" name="stats" label="Regular expression search statistics"/>
	</outputs>
	<tests>
		<test>
			<param name="sequences" value="random.fa" />
			<param name="regex" value="A{3}" />
			<output name="default" file="regex.a3.fa" />
			<output name="stats" file="stats.tsv" />
		</test>
	</tests>
	<help><![CDATA[
**What it does**

Filter FASTA Sequences with regular expressions.

For example to find a sequence with a Cysteine residue within the first 30
amino acids, you might use the following: ``.{0,29}C``, which says 0-29 of ANY
character, then a C. For help with advanced queries, please talk to your
friendly bioinformatician.

**Example Outputs**

For a query of ``A{3}`` which finds three As in a row, the fasta output file
includes those letters capitalized for easy visualization::

    >1
    acttacgcggagagatgagaccaacgctcgcctaggggcacgcttgtaattgacttatct
    agcttgccgtgaatggctccgggaataatggcaaggtatattgaagagcatgactccgtg
    ttgtagcatatctagttgttctccaagccttgctgagtccgagaaccacctgaggagtat
    ggaccttgggtagccgatttacaataagcctcctacccttgacaaccggaatcatgcgca
    tgatcgatgaccttttgcgcctcgcaccgttaacgAAAtatcgccgta
    >2
    gttggggacccacctatcagggagtgtagtagtataagactgtccaataccccccaacat
    cgcagtttacggtcgcatagttattagacgccgatgcgcgtcccaggatggagtcacggc
    ggcaatatccctccgttggatttagccaagctgcggccaatagtaagaatggcgggtacc
    tttagcatctcttgAAActagtaggtcgcattactcAAAcagttcgtttcat


And the "search table" output shows the positions of each hit::


    # Record ID  Hit #   Sequence Length   Hit start   Hit end
    1|random     0       288               275         278
    2|random     0       232               194         197
    2|random     1       232               216         219

]]></help>
	<expand macro="citations" />
</tool>
